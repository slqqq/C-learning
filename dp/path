
/*
给定一个矩阵m, 从左上角开始每次只能向右或者向下走,最后到达右下角的位置,路径上所有的数字累加起来就是路径和,返回所有的路径中最小的路径和.
https://www.cnblogs.com/mooba/p/7473262.html
*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
//使用二维数组的方式
int minPathSum1(int arr[4][4], int m, int n) {
	if (m == 0 || n == 0)
		return 0;
	vector<vector<int> >dp(m, vector<int>(n, 0));
	dp[0][0] = arr[0][0];
	for (int i = 1; i < m; i++)
		dp[i][0] = dp[i - 1][0] + arr[i][0];
	for (int j = 1; j < n; j++)
		dp[0][j] = dp[0][j - 1] + arr[0][j];

	for (int i = 1; i < m; i++) {
		for (int j = 1; j < n; j++)
			dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + arr[i][j];
	}

	return dp[m - 1][n - 1];
}

//使用一维数组的方式  空间压缩法，但中间记录会被刷新，无法用于打印具体路径，只能求最值。
int minPathSum2(int arr[4][4], int m, int n) {
	if (m == 0 || n == 0)
		return 0;
	vector<int> dp(n, 0);
	dp[0] = arr[0][0];
	for (int k = 1; k < n; k++)
		dp[k] = dp[k - 1] + arr[0][k];

	for (int i = 1; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (j == 0)
				dp[j] = dp[j] + arr[i][0];
			else {
				dp[j] = min(dp[j - 1], dp[j]) + arr[i][j];
			}
		}
	}

	return dp[n - 1];
}

int main()
{
	int arr[4][4] = { { 1,3,5,9 },{ 8,1,3,4 },{ 5,0,6,1 },{ 8,8,4,0 } };

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++)
			cout << arr[i][j] << " ";
		cout << endl;
	}
	cout << minPathSum1(arr, 4, 4) << endl;
	cout << minPathSum2(arr, 4, 4) << endl;
	system("pause");
	return 0;
}
